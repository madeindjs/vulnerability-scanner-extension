// @ts-check
const {Hacker, NotHackable} = require("./hacker");

/**
 * @type {Map<string, chrome.webRequest.WebRequestFullDetails>}
 */
const requests = new Map();

/**
 *
 * @param {chrome.webRequest.WebResponseHeadersDetails} response
 */
async function processResponse(response) {
  const request = requests.get(response.requestId);

  if (request === undefined) {
    return console.warn(`[processResponse] cannot find associated request`);
  }

  try {
    const worker = new Hacker(request, response);
    await worker.work();
  } catch (error) {
    if (error instanceof NotHackable) {
      console.warn(error.message);
    } else {
      throw error;
    }
  }
}
// Listeners

// start

function registerListeners() {
  /**
   * @param {chrome.webRequest.WebRequestBodyDetails} details
   */
  function onBeforeRequestListener(details) {
    requests.set(details.requestId, details);
    // console.log(`onBeforeRequest %o`, details);
  }

  /**
   *
   * @param {chrome.webRequest.WebRequestHeadersDetails} details
   */
  function onSendHeadersListener(details) {
    const request = requests.get(details.requestId);

    if (request === undefined) {
      return console.warn(
        `[onSendHeadersListener] cannot find associated request`
      );
    }

    request.requestHeaders = details.requestHeaders;
  }

  /**
   * @param {chrome.webRequest.WebResponseHeadersDetails} details
   */
  function onHeadersReceivedListener(details) {
    // console.log(`onHeadersReceivedListener %o`, details);
  }

  /**
   *
   * @param {chrome.webRequest.WebRedirectionResponseDetails} details
   */
  function onBeforeRedirectListener(details) {
    // console.log(`onBeforeRedirectListener %o`, details);
  }

  /**
   * @param {chrome.webRequest.WebResponseHeadersDetails} response
   */
  async function onResponseStartedListener(response) {
    await processResponse(response);
  }

  function onCommittedListener(details) {
    // console.log(`onCommittedListener %o`, details);
  }

  function onCompletedListener(details) {
    // console.log(`onCompletedListener %o`, details);
  }

  function onRemovedListener(details) {
    // console.log(`onRemovedListener %o`, details);
  }

  /**
   *
   * @param {any} message
   * @param {chrome.runtime.MessageSender} sender
   * @param {Function} sendResponse
   */
  function onMessageListener(message, sender, sendResponse) {
    // console.log(`onMessageListener %o`, details);
  }

  /** @type {chrome.webRequest.RequestFilter} */
  // const requestFilter = {urls: ["https://*.deepl.com/*"]};
  const requestFilter = {urls: ["https://translate.google.fr/*"]};
  // const urlsFilter = ["http://*/*", "https://*/*"]

  chrome.webRequest.onBeforeRequest.addListener(
    onBeforeRequestListener,
    requestFilter,
    ["requestBody"]
  );

  chrome.webRequest.onSendHeaders.addListener(
    onSendHeadersListener,
    requestFilter,
    ["requestHeaders"]
  );

  chrome.webRequest.onHeadersReceived.addListener(
    onHeadersReceivedListener,
    requestFilter,
    ["responseHeaders"]
  );

  chrome.webRequest.onBeforeRedirect.addListener(
    onBeforeRedirectListener,
    requestFilter,
    []
  );

  chrome.webRequest.onResponseStarted.addListener(
    onResponseStartedListener,
    requestFilter,
    ["responseHeaders"]
  );

  chrome.webNavigation.onCommitted.addListener(onCommittedListener);
  chrome.webNavigation.onCompleted.addListener(onCompletedListener);
  // chrome.tabs.onRemoved.addListener(onRemovedListener);
  chrome.runtime.onMessage.addListener(onMessageListener);
}

registerListeners();
