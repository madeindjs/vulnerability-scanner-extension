// @ts-check

const {Hacker, NotHackable} = require("./hacker");

/**
 * @type {Map<string, chrome.webRequest.WebRequestFullDetails>}
 */
const requests = new Map();

/**
 *
 * @param {chrome.webRequest.WebResponseHeadersDetails} response
 */
async function processResponse(response) {
  const request = requests.get(response.requestId);

  if (request === undefined) {
    return console.warn(`[processResponse] cannot find associated request`);
  }

  requests.delete(response.requestId);
  if (request.initiator?.startsWith("chrome-extension")) {
    return;
  }

  try {
    const worker = new Hacker(request, response);
    for await (const _ of worker.work()) {
      //
    }
  } catch (error) {
    if (error instanceof NotHackable) {
      console.warn(error.message);
    } else {
      throw error;
    }
  }
}
// Listeners

// start

/**
 * @param {chrome.webRequest.WebRequestBodyDetails} details
 */
function onBeforeRequestListener(details) {
  requests.set(details.requestId, details);
  // console.log(`onBeforeRequest %o`, details);
}

/**
 *
 * @param {chrome.webRequest.WebRequestHeadersDetails} details
 */
function onSendHeadersListener(details) {
  const request = requests.get(details.requestId);

  if (request === undefined) {
    return console.warn(
      `[onSendHeadersListener] cannot find associated request`
    );
  }

  request.requestHeaders = details.requestHeaders;
}

/**
 * @param {chrome.webRequest.WebResponseHeadersDetails} response
 */
async function onResponseStartedListener(response) {
  await processResponse(response);
}

function registerListeners() {
  console.log("register listeners");
  /** @type {chrome.webRequest.RequestFilter} */
  // const requestFilter = {urls: ["https://*.deepl.com/*"]};
  const requestFilter = {urls: ["https://translate.google.fr/*"]};
  // const urlsFilter = ["http://*/*", "https://*/*"]

  chrome.webRequest.onBeforeRequest.addListener(
    onBeforeRequestListener,
    requestFilter,
    ["requestBody"]
  );

  chrome.webRequest.onSendHeaders.addListener(
    onSendHeadersListener,
    requestFilter,
    ["requestHeaders"]
  );

  chrome.webRequest.onResponseStarted.addListener(
    onResponseStartedListener,
    requestFilter,
    ["responseHeaders"]
  );
}

function unregisterListeners() {
  console.log("unregister listeners");
  chrome.webRequest.onBeforeRequest.removeListener(onBeforeRequestListener);
  chrome.webRequest.onSendHeaders.removeListener(onSendHeadersListener);
  chrome.webRequest.onResponseStarted.removeListener(onResponseStartedListener);
}

module.exports = {
  registerListeners,
  unregisterListeners,
};
