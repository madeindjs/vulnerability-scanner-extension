// @ts-check

/**
 * @typedef StoreCount
 * @property {number} tries
 * @property {number} skips
 * @property {number} maybe
 * @property {number} works
 * @property {number} notWorks
 */

/**
 * @typedef Store
 * @property {StoreCount} counts
 * @property {boolean} active
 */

/** @type {Store} */
const store = {
  counts: {
    tries: 0,
    skips: 0,
    maybe: 0,
    works: 0,
    notWorks: 0,
  },
  active: true,
};

async function initializeLocalStore() {
  const currentData = await getLocalStorage();

  Object.assign(store, currentData);

  await chrome.storage.local.set(store);
}

/**
 * @param {'tries' | 'skips' | 'maybe' | 'works' | 'notWorks'} key
 * @returns {Promise<void>}
 */
async function incrementKey(key) {
  store.counts[key] += 1;

  await chrome.storage.local.set({...store});
}

/**
 *
 * @param {string | string[] | { [key: string]: any;  }} filter
 * @returns {Promise<{ [key: string]: any }>}
 */
function getLocalStorage(filter = undefined) {
  return new Promise((res) => {
    chrome.storage.local.get(filter, (items) => res(items));
  });
}

initializeLocalStore().catch(console.error);

module.exports = {
  incrementSkips: () => incrementKey("skips"),
  incrementTries: () => incrementKey("tries"),
  incrementMaybe: () => incrementKey("maybe"),
  incrementWorks: () => incrementKey("works"),
  incrementNotWorks: () => incrementKey("notWorks"),
  getLocalStorage,
};
