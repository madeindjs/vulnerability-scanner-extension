// @ts-check

/**
 * @typedef StoreCount
 * @property {number} tries
 * @property {number} skips
 * @property {number} maybe
 * @property {number} works
 * @property {number} notWorks
 */

/**
 * @typedef RanHack
 * @property {WorkedResponse} result
 * @property {Request} request
 * @property {Response} request
 */

/**
 * @typedef Store
 * @property {RanHack[]} ranHacks
 * @property {boolean} active
 * @property {number} version
 */

/** @type {Store} */
const initialStore = {
  version: 1,
  ranHacks: [],
  active: true,
};

async function initializeLocalStore() {
  const currentData = await getLocalStorage();
  Object.assign(initialStore, currentData);
  await chrome.storage.local.set(initialStore);
}

// chrome.storage.onChanged.addListener((data) => {
//   Object.keys(data)
//     .filter((key) => data[key].newValue !== undefined)
//     .forEach((key) => (store[key] = data[key].newValue));
// });

/**
 *
 * @param {RanHack} ranHack
 */
async function pushRanHack(ranHack) {
  const {ranHacks} = await getLocalStorage("ranHacks");
  ranHacks.push(ranHack);
  await chrome.storage.local.set({ranHacks});
}

/**
 *
 * @param {string | string[] | { [key: string]: any;  }} filter
 * @returns {Promise<Store>}
 */
function getLocalStorage(filter = undefined) {
  return new Promise((res) => {
    // @ts-ignore
    chrome.storage.local.get(filter, (items) => res(items));
  });
}

initializeLocalStore().catch(console.error);

module.exports = {
  getLocalStorage,
  pushRanHack,
};
