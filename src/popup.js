// @ts-check

const {getLocalStorage} = require("./storage");

/** @type {HTMLInputElement} */
// @ts-ignore
const activate = document.getElementById("activate");

const countElements = {
  tries: document.getElementById("tries"),
  maybe: document.getElementById("maybe"),
  works: document.getElementById("works"),
  notWorks: document.getElementById("notWorks"),
};

/**
 *
 * @param {import("./storage").RanHack} ranHack
 * @param {WorkedResponseStatus} status
 * @returns {boolean}
 */
const isRanHackStatus = (ranHack, status) => ranHack.result.status === status;
const isMaybe = (ranHack) => isRanHackStatus(ranHack, "maybe");
const isNo = (ranHack) => isRanHackStatus(ranHack, "no");
const isYes = (ranHack) => isRanHackStatus(ranHack, "yes");

async function onLoad() {
  const {ranHacks, active} = await getLocalStorage(["counts", "ranHacks"]);

  if (ranHacks !== undefined) {
    countElements.tries.innerText = ranHacks.length.toString();
    countElements.maybe.innerText = ranHacks.filter(isMaybe).length.toString();
    countElements.notWorks.innerText = ranHacks.filter(isNo).length.toString();
    countElements.works.innerText = ranHacks.filter(isYes).length.toString();
  }

  if (activate !== undefined) {
    activate.checked = active;
  }
}

activate.addEventListener("click", async () => {
  await chrome.storage.local.set({active: activate.checked});
});

chrome.storage.onChanged.addListener(({ranHacks}) => {
  if (ranHacks?.newValue !== undefined) {
    countElements.tries.innerText = ranHacks.newValue.length.toString();
    countElements.maybe.innerText = ranHacks.newValue
      .filter(isMaybe)
      .length.toString();
    countElements.notWorks.innerText = ranHacks.newValue
      .filter(isNo)
      .length.toString();
    countElements.works.innerText = ranHacks.newValue
      .filter(isYes)
      .length.toString();
  }
});

onLoad().catch(console.error);
