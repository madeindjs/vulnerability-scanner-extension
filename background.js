// @ts-check

/**
 * @type {Map<string, chrome.webRequest.WebRequestFullDetails>}
 */
const requests = new Map();

/**
 * @type {Map<string, chrome.webRequest.WebResponseDetails>}
 */
const responses = new Map();

const tries = [];

/**
 *
 * @param {chrome.webRequest.HttpHeader[]} headers
 * @param {string} name
 * @returns {string | undefined}
 */
function getHeaderValue(headers, name) {
  return headers.find((header) => header.name.toLowerCase() === name)?.value;
}

/**
 *
 * @param {chrome.webRequest.WebRequestBody} requestBody
 * @returns {string | object | undefined}
 */
function parseWebRequestBody(requestBody) {
  if (requestBody?.raw === undefined) {
    return undefined;
  }

  const body = decodeURIComponent(
    String.fromCharCode.apply(null, new Uint8Array(requestBody.raw[0].bytes))
  );

  try {
    return JSON.parse(body);
  } catch {
    return body;
  }
}

class NotHackable extends Error {
  /**
   *
   * @param {chrome.webRequest.WebRequestFullDetails} request
   * @param {string} message
   */
  constructor(request, message) {
    super(
      `[NotHackable] cannot hack ${request.method} ${request.url} - ${message}`
    );
  }
}

class Hacker {
  _tries = [];
  /**
   * @type {chrome.webRequest.WebRequestFullDetails}
   */
  _request = undefined;
  /**
   * @type {chrome.webRequest.WebResponseHeadersDetails}
   */
  _response = undefined;

  /**
   * @type {BodyInit}
   */
  _requestBody;

  /**
   * @param {chrome.webRequest.WebRequestFullDetails} request
   * @param {chrome.webRequest.WebResponseHeadersDetails} response
   */
  constructor(request, response) {
    this._request = request;
    this._response = response;

    this._checkRequest();
    this._checkResponse();

    this._requestBody = parseWebRequestBody(this._request.requestBody);
  }

  work() {
    console.log(`[${Hacker.name}] try to hack ${this._request.url}`);
    this._fetch();
  }

  /**
   * @returns {Promise<Response>}
   */
  _fetch() {
    /**
     * @type {HeadersInit}
     */
    const headers = this._request.requestHeaders
      .filter(({binaryValue}) => binaryValue === undefined)
      .reduce((result, header) => {
        result[header.name] = header.value;
        return result;
      }, {});

    headers["User-Agent"] = "SecurityScanner/0.0.1";
    headers["user-Agent"] = "SecurityScanner/0.0.1";

    /**
     * @type {RequestInit}
     */
    const init = {
      method: this._request.method,
      body: this._requestBody,
      headers,
    };

    this._tries.push({url: this._request.url, init});

    // TODO: send body

    return fetch(this._request.url, init).then((res) => {
      console.log(`[Hacker._fetch] %o`, res);
      return res;
    });
  }

  _checkRequest() {
    if (this._request.requestBody === undefined) {
      throw new NotHackable(this._request, `request body is undefined`);
    }
  }

  _checkResponse() {
    const responseContentType = getHeaderValue(
      this._response.responseHeaders,
      "content-type"
    );

    const isHackableContentType = [
      "multipart/from-data",
      "application/json",
      "text/html",
    ].some((header) => responseContentType?.startsWith(header));

    if (!isHackableContentType) {
      throw new NotHackable(
        this._request,
        `incompatible "Content-Type: ${responseContentType}"`
      );
    }
  }
}

/**
 *
 * @param {chrome.webNavigation.GetFrameDetails} getFrameDetails
 * @returns {Promise<chrome.webNavigation.GetFrameResultDetails>}
 */
function getFrame(getFrameDetails) {
  return new Promise((res, rej) => {
    chrome.webNavigation.getFrame(getFrameDetails, (details) => {
      if (details && details.url) {
        return res(details);
      }
      return rej(Error("Cannot get frame"));
    });
  });
}

/**
 *
 * @param {chrome.webRequest.WebResponseHeadersDetails} response
 * @param {chrome.webNavigation.GetFrameResultDetails} frameDetails
 */
function processResponse(response, frameDetails) {
  const request = requests.get(response.requestId);

  if (frameDetails.errorOccurred === true) {
    return;
  }

  if (request === undefined) {
    return console.warn(`[processResponse] cannot find associated request`);
  }

  try {
    const worker = new Hacker(request, response);
    worker.work();
  } catch (error) {
    if (error instanceof NotHackable) {
      console.warn(error.message);
    } else {
      throw error;
    }
  }
}
// Listeners

/**
 * @param {chrome.webRequest.WebRequestBodyDetails} details
 */
function onBeforeRequestListener(details) {
  requests.set(details.requestId, details);
  // console.log(`onBeforeRequest %o`, details);
}

/**
 *
 * @param {chrome.webRequest.WebRequestHeadersDetails} details
 */
function onSendHeadersListener(details) {
  const request = requests.get(details.requestId);

  if (request === undefined) {
    return console.warn(
      `[onSendHeadersListener] cannot find associated request`
    );
  }

  request.requestHeaders = details.requestHeaders;
}

/**
 * @param {chrome.webRequest.WebResponseHeadersDetails} details
 */
function onHeadersReceivedListener(details) {
  // console.log(`onHeadersReceivedListener %o`, details);
}

/**
 *
 * @param {chrome.webRequest.WebRedirectionResponseDetails} details
 */
function onBeforeRedirectListener(details) {
  // console.log(`onBeforeRedirectListener %o`, details);
}

/**
 * @param {chrome.webRequest.WebResponseHeadersDetails} details
 */
function onResponseStartedListener(details) {
  if (details.frameId < 0) {
    details.frameId = 99999;
  }

  getFrame({tabId: details.tabId, processId: null, frameId: details.frameId})
    .then((frameDetails) => processResponse(details, frameDetails))
    .catch(() => {});
}

function onCommittedListener(details) {
  // console.log(`onCommittedListener %o`, details);
}

function onCompletedListener(details) {
  // console.log(`onCompletedListener %o`, details);
}

function onRemovedListener(details) {
  // console.log(`onRemovedListener %o`, details);
}

/**
 *
 * @param {any} message
 * @param {chrome.runtime.MessageSender} sender
 * @param {Function} sendResponse
 */
function onMessageListener(message, sender, sendResponse) {
  // console.log(`onMessageListener %o`, details);
}

// start

function registerListeners() {
  chrome.webRequest.onBeforeRequest.addListener(
    onBeforeRequestListener,
    {urls: ["http://*/*", "https://*/*"]},
    ["requestBody"]
  );

  chrome.webRequest.onSendHeaders.addListener(
    onSendHeadersListener,
    {urls: ["http://*/*", "https://*/*"]},
    ["requestHeaders"]
  );

  chrome.webRequest.onHeadersReceived.addListener(
    onHeadersReceivedListener,
    {urls: ["http://*/*", "https://*/*"]},
    ["responseHeaders"]
  );

  chrome.webRequest.onBeforeRedirect.addListener(
    onBeforeRedirectListener,
    {urls: ["http://*/*", "https://*/*"]},
    []
  );

  chrome.webRequest.onResponseStarted.addListener(
    onResponseStartedListener,
    {urls: ["http://*/*", "https://*/*"]},
    ["responseHeaders"]
  );

  chrome.webNavigation.onCommitted.addListener(onCommittedListener);
  chrome.webNavigation.onCompleted.addListener(onCompletedListener);
  // chrome.tabs.onRemoved.addListener(onRemovedListener);
  chrome.runtime.onMessage.addListener(onMessageListener);
}

registerListeners();
