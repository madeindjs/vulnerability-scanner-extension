// @ts-check

/**
 * @type {Map<string, chrome.webRequest.WebRequestFullDetails>}
 */
const requests = new Map();

/**
 *
 * @param {chrome.webNavigation.GetFrameDetails} getFrameDetails
 * @returns {Promise<chrome.webNavigation.GetFrameResultDetails>}
 */
function getFrame(getFrameDetails) {
  return new Promise((res, rej) => {
    chrome.webNavigation.getFrame(getFrameDetails, (details) => {
      if (details && details.url) {
        return res(details);
      }
      return rej(Error("Cannot get frame"));
    });
  });
}

/**
 *
 * @param {chrome.webRequest.WebResponseCacheDetails} response
 * @param {chrome.webNavigation.GetFrameResultDetails} frameDetails
 */
function processResponse(response, frameDetails) {
  const request = requests.get(response.requestId);

  if (frameDetails.errorOccurred === true) {
    return;
  }

  if (request === undefined) {
    return console.warn(`[processResponse] cannot find associated request`);
  }

  console.log(`[processResponse] %o %o`, response, request);
}

// Listeners

/**
 * @param {chrome.webRequest.WebRequestBodyDetails} details
 */
function onBeforeRequestListener(details) {
  requests.set(details.requestId, details);
  // console.log(`onBeforeRequest %o`, details);
}

/**
 *
 * @param {chrome.webRequest.WebRequestHeadersDetails} details
 */
function onSendHeadersListener(details) {
  const request = requests.get(details.requestId);

  if (request === undefined) {
    return console.warn(
      `[onSendHeadersListener] cannot find associated request`
    );
  }

  request.requestHeaders = details.requestHeaders;
}

/**
 * @param {chrome.webRequest.WebResponseHeadersDetails} details
 */
function onHeadersReceivedListener(details) {
  // console.log(`onHeadersReceivedListener %o`, details);
}

/**
 *
 * @param {chrome.webRequest.WebRedirectionResponseDetails} details
 */
function onBeforeRedirectListener(details) {
  // console.log(`onBeforeRedirectListener %o`, details);
}

/**
 * @param {chrome.webRequest.WebResponseCacheDetails} details
 */
function onResponseStartedListener(details) {
  if (details.frameId < 0) {
    details.frameId = 99999;
  }

  getFrame({tabId: details.tabId, processId: null, frameId: details.frameId})
    .then((frameDetails) => processResponse(details, frameDetails))
    .catch(console.error);
}

function onCommittedListener(details) {
  // console.log(`onCommittedListener %o`, details);
}

function onCompletedListener(details) {
  // console.log(`onCompletedListener %o`, details);
}

function onRemovedListener(details) {
  // console.log(`onRemovedListener %o`, details);
}

/**
 *
 * @param {any} message
 * @param {chrome.runtime.MessageSender} sender
 * @param {Function} sendResponse
 */
function onMessageListener(message, sender, sendResponse) {
  // console.log(`onMessageListener %o`, details);
}

// start

function registerListeners() {
  chrome.webRequest.onBeforeRequest.addListener(
    onBeforeRequestListener,
    {urls: ["http://*/*", "https://*/*"]},
    ["requestBody"]
  );

  chrome.webRequest.onSendHeaders.addListener(
    onSendHeadersListener,
    {urls: ["http://*/*", "https://*/*"]},
    ["requestHeaders"]
  );

  chrome.webRequest.onHeadersReceived.addListener(
    onHeadersReceivedListener,
    {urls: ["http://*/*", "https://*/*"]},
    ["responseHeaders"]
  );

  chrome.webRequest.onBeforeRedirect.addListener(
    onBeforeRedirectListener,
    {urls: ["http://*/*", "https://*/*"]},
    []
  );

  chrome.webRequest.onResponseStarted.addListener(
    onResponseStartedListener,
    {urls: ["http://*/*", "https://*/*"]},
    ["responseHeaders"]
  );

  chrome.webNavigation.onCommitted.addListener(onCommittedListener);
  chrome.webNavigation.onCompleted.addListener(onCompletedListener);
  // chrome.tabs.onRemoved.addListener(onRemovedListener);
  chrome.runtime.onMessage.addListener(onMessageListener);
}

registerListeners();
